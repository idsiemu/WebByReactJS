{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","_ref","title","poster","genres","synopsis","react_default","a","createElement","className","MoviePoster","alt","map","genre","index","MovieGenre","key","_ref2","src","_ref3","prototype","PropTypes","string","isRequired","array","number","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","tomato","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAqBA,SAASA,EAATC,GAA8C,IAA9BC,EAA8BD,EAA9BC,MAAMC,EAAwBF,EAAxBE,OAAOC,EAAiBH,EAAjBG,OAAOC,EAAUJ,EAAVI,SAChC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACE,EAAD,CAAaP,OAAQA,EAAQQ,IAAKT,KAEtCI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVL,EAAOQ,IAAI,SAACC,EAAMC,GAAP,OAAiBR,EAAAC,EAAAC,cAACO,EAAD,CAAYF,MAAOA,EAAOG,IAAKF,OAEhER,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBACRJ,KAoBrB,SAASK,EAATO,GAAmC,IAAbd,EAAac,EAAbd,OAAQQ,EAAKM,EAALN,IAC1B,OACIL,EAAAC,EAAAC,cAAA,OAAKU,IAAKf,EAAQQ,IAAKA,EAAKT,MAAOS,EAAKF,UAAU,iBAI1D,SAASM,EAATI,GAA4B,IAAPN,EAAOM,EAAPN,MACjB,OACIP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeI,EAA/B,KAIRb,EAAMoB,UAAY,CACdlB,MAAOmB,IAAUC,OAAOC,WACxBpB,OAAQkB,IAAUC,OAAOC,WACzBnB,OAAQiB,IAAUG,MAAMD,WACxBlB,SAAUgB,IAAUC,OAAOC,YAG/Bb,EAAYU,UAAY,CACpBjB,OAAQkB,IAAUI,OAAOF,WACzBZ,IAAKU,IAAUC,OAAOC,YAG1BR,EAAWK,UAAU,CACjBP,MAAOQ,IAAUC,OAAOC,YAGbvB,QCZA0B,6MA7CbC,MAAQ,KAKRC,cAAgB,WAYd,OAXeC,EAAKF,MAAMG,OAAOlB,IAAI,SAACmB,GAEpC,OADAC,QAAQC,IAAIF,GACLzB,EAAAC,EAAAC,cAAC0B,EAAD,CACNhC,MAAO6B,EAAMI,cACbhC,OAAQ4B,EAAMK,mBACdpB,IAAKe,EAAMM,GACXjC,OAAQ2B,EAAM3B,OACdC,SAAU0B,EAAM1B,gBAOrBiC,gCAAa,SAAAC,IAAA,IAAAT,EAAA,OAAAU,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUf,EAAKgB,WADf,OACLf,EADKY,EAAAI,KAEXjB,EAAKkB,SAAS,CACZjB,WAHS,wBAAAY,EAAAM,SAAAT,QAObM,SAAW,WAET,OAAOI,MAAM,6DACZC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKvB,SACvBwB,MAAM,SAAAC,GAAG,OAAIvB,QAAQC,IAAIsB,0FAxC1BvB,QAAQC,IAAI,0DAKZD,QAAQC,IAAI,yDAMZuB,KAAKlB,8CAmCL,OADAN,QAAQC,IAAI,cAEV3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACX+C,KAAK7B,MAAMG,OAAS0B,KAAK5B,gBAAkB,kBA1DnC6B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.ac6fe899.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\n\r\n/*class Movie extends Component{\r\n\r\n    static propTypes = {\r\n        title: PropTypes.string.isRequired,\r\n        poster: PropTypes.string\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <MoviePoster poster={this.props.poster}/>\r\n                <h1>{this.props.title}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}*/\r\n\r\nfunction Movie({title,poster,genres,synopsis}){\r\n    return(\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie_Columns\">\r\n                <MoviePoster poster={poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie_Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie_Genres\">\r\n                    {genres.map((genre,index) => <MovieGenre genre={genre} key={index}/>)}\r\n                </div>\r\n                <p className=\"Movie_Synopsis\">\r\n                    {synopsis}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*class MoviePoster extends Component{\r\n\r\n    static propTypes = {\r\n        poster: PropTypes.string.isRequired\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <img src={this.props.poster} alt=\"Movie Poster\"/>\r\n        )\r\n    }\r\n}*/\r\n\r\nfunction MoviePoster({poster, alt}){\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie_Poster\"/>\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return (\r\n        <span className=\"Movie_Genre\">{genre} </span>\r\n    )\r\n}\r\n\r\nMovie.prototype = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.prototype = {\r\n    poster: PropTypes.number.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.prototype={\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie ","import React, {Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n\n//컴포넌트는 많은 functions를 가지고 있고 그것들이 순서대로 자동으로 작동한다.\nclass App extends Component {\n\n  //Render의 경우 : componentWillMount -- > render -- > componentDidMount\n  //컴포넌트가 존재함과 동시에 3위 3가지 요소가 연속적으로 실행된다.\n\n  //Update componentWillReceiveProps -- > shouldComponentUpdate (기존것과 비교연산하여 다름이 있으면 return true) -- > componentWillUpdate -- > render -- > componentDidUpdate\n  \n\n  componentWillMount(){\n    //사이클이 시작되었음을 알 수 있는 부분\n    console.log('will mount');\n  }\n\n  componentDidMount(){\n    //성공적으로 리액트 세계에 컴포넌트가 자리잡았음을 알게됨\n    console.log('did mount');\n  }\n\n  state = {}\n\n  componentDidMount(){\n    this._getMovies();\n  }\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) => {\n      console.log(movie)\n      return <Movie\n       title={movie.title_english} \n       poster={movie.medium_cover_image} \n       key={movie.id} \n       genres={movie.genres}\n       synopsis={movie.synopsis}\n       />\n    })\n    \n    return movies\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    //promise 해당행이 실행되어 결과가 나오지 않으면 다음으로 넘어가지않음\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=like_count')\n    .then(tomato => tomato.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    //컴포넌트가 리액트 세계에 존재하게 되었음을 알게됨\n    console.log('did render');\n    return (\n      <div className=\"App\">\n         {this.state.movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}